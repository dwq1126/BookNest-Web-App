{{!-- Authentication Page (Login/Register) --}}
<style>
    body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        min-height: 100vh;
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .auth-container {
        background: white;
        border-radius: 25px;
        padding: 3rem;
        box-shadow: 0 25px 50px rgba(0,0,0,0.2);
        max-width: 450px;
        width: 100%;
        margin: 2rem;
        position: relative;
        overflow: hidden;
    }
    
    .auth-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 5px;
        background: linear-gradient(90deg, #667eea, #764ba2, #667eea);
        background-size: 200% 100%;
        animation: shimmer 3s linear infinite;
    }
    
    @keyframes shimmer {
        0% { background-position: -200% 0; }
        100% { background-position: 200% 0; }
    }
    
    .auth-header {
        text-align: center;
        margin-bottom: 2.5rem;
    }
    
    .auth-logo {
        font-size: 3rem;
        margin-bottom: 1rem;
        display: block;
    }
    
    .auth-title {
        color: #1f2937;
        font-size: 2rem;
        margin-bottom: 0.5rem;
        font-weight: 700;
    }
    
    .auth-subtitle {
        color: #6b7280;
        font-size: 1rem;
    }
    
    .auth-tabs {
        display: flex;
        background: #f3f4f6;
        border-radius: 15px;
        padding: 0.5rem;
        margin-bottom: 2rem;
        position: relative;
    }
    
    .auth-tab {
        flex: 1;
        padding: 1rem;
        text-align: center;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 600;
        color: #6b7280;
        position: relative;
        z-index: 2;
    }
    
    .auth-tab.active {
        color: #667eea;
        background: white;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .auth-tab:hover:not(.active) {
        color: #374151;
    }
    
    .auth-form {
        display: none;
    }
    
    .auth-form.active {
        display: block;
        animation: fadeIn 0.5s ease-in-out;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .form-section {
        background: #f8fafc;
        padding: 1.5rem;
        border-radius: 15px;
        margin-bottom: 1.5rem;
        border: 1px solid #e5e7eb;
    }
    
    .section-title {
        color: #1f2937;
        font-size: 1.1rem;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #e5e7eb;
        font-weight: 600;
    }
    
    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1rem;
    }
    
    .form-row:last-child {
        margin-bottom: 0;
    }
    
    .form-group {
        margin-bottom: 0;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        color: #374151;
        font-weight: 600;
        font-size: 0.9rem;
    }
    
    .form-group input {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid #e5e7eb;
        border-radius: 10px;
        font-size: 0.95rem;
        transition: all 0.3s ease;
        background: #f9fafb;
    }
    
    .form-group input:focus {
        outline: none;
        border-color: #667eea;
        background: white;
        box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
    }
    
    .form-group input.error {
        border-color: #dc2626;
        background: #fef2f2;
    }
    
    .form-group input.success {
        border-color: #10b981;
        background: #f0fdf4;
    }
    
    .error-message {
        color: #dc2626;
        font-size: 0.9rem;
        margin-top: 0.5rem;
        display: none;
        padding: 0.5rem;
        background: #fef2f2;
        border-radius: 8px;
        border: 1px solid #fecaca;
    }
    
    .success-message {
        color: #065f46;
        font-size: 0.9rem;
        margin-top: 0.5rem;
        display: none;
        padding: 0.5rem;
        background: #d1fae5;
        border-radius: 8px;
        border: 1px solid #a7f3d0;
    }
    
    .submit-btn {
        width: 100%;
        padding: 1rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 12px;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-top: 1rem;
    }
    
    .submit-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
    }
    
    .submit-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }
    
    .auth-footer {
        text-align: center;
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 1px solid #e5e7eb;
        color: #6b7280;
        font-size: 0.9rem;
    }
    
    .auth-footer a {
        color: #667eea;
        text-decoration: none;
        font-weight: 600;
    }
    
    .auth-footer a:hover {
        text-decoration: underline;
    }
    
    .demo-credentials {
        background: #f0f9ff;
        border: 1px solid #bae6fd;
        border-radius: 12px;
        padding: 1rem;
        margin-bottom: 1.5rem;
        text-align: center;
    }
    
    .demo-credentials h4 {
        color: #0369a1;
        margin: 0 0 0.5rem 0;
        font-size: 0.9rem;
    }
    
    .demo-credentials p {
        color: #0c4a6e;
        margin: 0;
        font-size: 0.85rem;
        font-family: monospace;
    }
    
    .loading {
        position: relative;
        pointer-events: none;
    }
    
    .loading::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 20px;
        height: 20px;
        margin: -10px 0 0 -10px;
        border: 2px solid transparent;
        border-top: 2px solid white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    @media (max-width: 768px) {
        .auth-container {
            padding: 2rem;
            margin: 1rem;
        }
        
        .auth-title {
            font-size: 1.75rem;
        }
        
        .auth-logo {
            font-size: 2.5rem;
        }
        
        .form-row {
            grid-template-columns: 1fr;
            gap: 0.5rem;
        }
        
        .form-section {
            padding: 1rem;
        }
        
        .form-group input {
            padding: 0.875rem;
        }
    }
</style>

<div class="auth-container">
    <div class="auth-header">
        <span class="auth-logo">ðŸ“š</span>
        <h1 class="auth-title">BookNest</h1>
        <p class="auth-subtitle">Join our community of book lovers</p>
    </div>
    
    {{!-- Demo Credentials --}}
    <div class="demo-credentials">
        <h4>Demo Account</h4>
        <p>Username: demo | Password: demo123</p>
    </div>
    
    {{!-- Tab Navigation --}}
    <div class="auth-tabs">
        <div class="auth-tab {{#if (eq mode 'login')}}active{{/if}}" onclick="switchTab('login')">
            Sign In
        </div>
        <div class="auth-tab {{#if (eq mode 'register')}}active{{/if}}" onclick="switchTab('register')">
            Sign Up
        </div>
    </div>
    
    {{!-- Messages --}}
    <div id="messageContainer"></div>
    
    {{!-- Login Form --}}
    <form id="loginForm" class="auth-form {{#if (eq mode 'login')}}active{{/if}}">
        <div class="form-group">
            <label for="loginUsername">Username or Email</label>
            <input type="text" id="loginUsername" name="username" required>
        </div>
        
        <div class="form-group">
            <label for="loginPassword">Password</label>
            <input type="password" id="loginPassword" name="password" required>
        </div>
        
        <button type="submit" class="submit-btn" id="loginBtn">
            Sign In
        </button>
    </form>
    
    {{!-- Register Form --}}
    <form id="registerForm" class="auth-form {{#if (eq mode 'register')}}active{{/if}}">
        {{!-- Basic Information --}}
        <div class="form-section">
            <h4 class="section-title">Basic Information</h4>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="registerUsername">Username *</label>
                    <input type="text" id="registerUsername" name="username" required>
                </div>
                
                <div class="form-group">
                    <label for="registerEmail">Email *</label>
                    <input type="email" id="registerEmail" name="email" required>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="firstName">First Name *</label>
                    <input type="text" id="firstName" name="firstName" required>
                </div>
                
                <div class="form-group">
                    <label for="lastName">Last Name *</label>
                    <input type="text" id="lastName" name="lastName" required>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="registerPassword">Password *</label>
                    <input type="password" id="registerPassword" name="password" required>
                </div>
                
                <div class="form-group">
                    <label for="confirmPassword">Confirm Password *</label>
                    <input type="password" id="confirmPassword" name="confirmPassword" required>
                </div>
            </div>
        </div>
        
        {{!-- Location Information --}}
        <div class="form-section">
            <h4 class="section-title">Location</h4>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="city">City</label>
                    <input type="text" id="city" name="city" placeholder="e.g., New York">
                </div>
                
                <div class="form-group">
                    <label for="state">State</label>
                    <input type="text" id="state" name="state" placeholder="e.g., NY">
                </div>
            </div>
        </div>
        
        {{!-- Profile Information --}}
        <div class="form-section">
            <h4 class="section-title">Profile</h4>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="age">Age</label>
                    <input type="number" id="age" name="age" min="13" max="120" placeholder="e.g., 25">
                </div>
                
                <div class="form-group">
                    <label for="profilePicture">Profile Picture URL</label>
                    <input type="url" id="profilePicture" name="profilePicture" placeholder="https://example.com/avatar.jpg">
                </div>
            </div>
        </div>
        
        <button type="submit" class="submit-btn" id="registerBtn">
            Create Account
        </button>
    </form>
    
    <div class="auth-footer">
        <p>By continuing, you agree to our <a href="#">Terms of Service</a> and <a href="#">Privacy Policy</a></p>
    </div>
</div>

<script>
// Tab switching functionality
function switchTab(tab) {
    // Update tab styles
    document.querySelectorAll('.auth-tab').forEach(t => t.classList.remove('active'));
    event.target.classList.add('active');
    
    // Update form visibility
    document.querySelectorAll('.auth-form').forEach(f => f.classList.remove('active'));
    if (tab === 'login') {
        document.getElementById('loginForm').classList.add('active');
    } else {
        document.getElementById('registerForm').classList.add('active');
    }
    
    // Clear messages
    clearMessages();
}

// Clear all messages
function clearMessages() {
    document.getElementById('messageContainer').innerHTML = '';
}

// Show message
function showMessage(message, type) {
    const messageContainer = document.getElementById('messageContainer');
    const messageEl = document.createElement('div');
    messageEl.className = type === 'success' ? 'success-message' : 'error-message';
    messageEl.textContent = message;
    messageEl.style.display = 'block';
    
    messageContainer.appendChild(messageEl);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
        messageEl.remove();
    }, 5000);
}

// Handle login form submission
document.getElementById('loginForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const submitBtn = document.getElementById('loginBtn');
    const originalText = submitBtn.textContent;
    
    // Show loading state
    submitBtn.classList.add('loading');
    submitBtn.textContent = 'Signing In...';
    submitBtn.disabled = true;
    
    const formData = new FormData(this);
    const data = Object.fromEntries(formData.entries());
    
    fetch('/auth/login', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            showMessage(result.message, 'success');
            
            // Redirect to profile page after successful login
            setTimeout(() => {
                window.location.href = '/users/profile';
            }, 1500);
        } else {
            showMessage(result.message, 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showMessage('An error occurred during login', 'error');
    })
    .finally(() => {
        // Reset button state
        submitBtn.classList.remove('loading');
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
    });
});

// Handle register form submission
document.getElementById('registerForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const submitBtn = document.getElementById('registerBtn');
    const originalText = submitBtn.textContent;
    
    // Show loading state
    submitBtn.classList.add('loading');
    submitBtn.textContent = 'Creating Account...';
    submitBtn.disabled = true;
    
    const formData = new FormData(this);
    const data = Object.fromEntries(formData.entries());
    
    // Client-side validation
    if (!data.firstName || !data.lastName) {
        showMessage('First Name and Last Name are required', 'error');
        submitBtn.classList.remove('loading');
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
        return;
    }
    
    if (data.password !== data.confirmPassword) {
        showMessage('Passwords do not match', 'error');
        submitBtn.classList.remove('loading');
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
        return;
    }
    
    if (data.password.length < 6) {
        showMessage('Password must be at least 6 characters long', 'error');
        submitBtn.classList.remove('loading');
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
        return;
    }
    
    // Age validation
    if (data.age && (data.age < 13 || data.age > 120)) {
        showMessage('Age must be between 13 and 120', 'error');
        submitBtn.classList.remove('loading');
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
        return;
    }
    
    fetch('/auth/register', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            showMessage(result.message, 'success');
            
            // Switch to login tab after successful registration
            setTimeout(() => {
                switchTab('login');
                this.reset();
            }, 1500);
        } else {
            showMessage(result.message, 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showMessage('An error occurred during registration', 'error');
    })
    .finally(() => {
        // Reset button state
        submitBtn.classList.remove('loading');
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
    });
});

// Real-time password confirmation validation
document.getElementById('confirmPassword').addEventListener('input', function() {
    const password = document.getElementById('registerPassword').value;
    const confirmPassword = this.value;
    
    if (confirmPassword && password !== confirmPassword) {
        this.classList.add('error');
        this.classList.remove('success');
    } else if (confirmPassword && password === confirmPassword) {
        this.classList.remove('error');
        this.classList.add('success');
    } else {
        this.classList.remove('error', 'success');
    }
});

// Real-time password validation
document.getElementById('registerPassword').addEventListener('input', function() {
    const password = this.value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    
    if (password.length < 6) {
        this.classList.add('error');
        this.classList.remove('success');
    } else {
        this.classList.remove('error');
        this.classList.add('success');
    }
    
    // Update confirm password validation
    if (confirmPassword && password !== confirmPassword) {
        document.getElementById('confirmPassword').classList.add('error');
        document.getElementById('confirmPassword').classList.remove('success');
    } else if (confirmPassword && password === confirmPassword) {
        document.getElementById('confirmPassword').classList.remove('error');
        document.getElementById('confirmPassword').classList.add('success');
    }
});
</script>
